{
  "hash": "f5a0bb926f4fcd44320418e8870e6607",
  "result": {
    "markdown": "---\ntitle: \"Visualizing My Personal Spending Data Using R-Shiny\"\ndescription: \"Using R-Shiny to re-create the Mint (by Intuit) interactive dashboard\"\nauthor: \n  - name: \"Briana Barajas\"\n    url: https://briana-barajas.github.io/\ndate: 04-10-2024\ncategories: [R, Visualization, Dashboard]\nimage: piggy-bank.jpeg\ndraft: TRUE\nfootnotes-hover: TRUE\noutput: html_document\nformat: \n  html:\n    code-fold: TRUE\n    code-summary: \"View Code\"    \n---\n\n\n## Background\n\nIn December 2023 it was announced that the Mint personal finance tool, hosted by [Intuit](https://www.intuit.com/), would no longer be supported. Mint users, such as myself, could download their historical spending data as a CSV file or switch over to [Credit Karma](https://www.creditkarma.com/). I initially transferred my data to Credit Karma, but I was not thrilled with the user interface. Unsurprisingly the site was focused more on tracking credit history, and I missed the simple interactive plots. In a bid to take control of my personal data, and to create an interactive dashboard on my own I decided to recreate the old dashboard (below).\n\n![](mint-spending-original.png){fig-align=\"center\" width=\"974\"}\n\n## Organizing the Data\n\nBefore I could start writing code for the dashboard, I needed to decide how to structure my data. Mint's tool grouped spending based on categories they provided. Since I had been Mint for 4 years, I was familiar with my top spending categories and decided to keep most of the naming conventions. Using an Excel spreadsheet, I created a data table for my transaction history with the following structure:\n\n| purchase_date | store | total_cost | category | subcategory | split | note                     |\n|--------------|---------|-----------|------------|--------------|---------|-----|\n| 2/18/24       | shop1 | 12.34      | Home     | Supplies    | 0     | NA                       |\n| 2/28/24       | shop2 | 41.23      | Auto     | Gas         | 0     | NA                       |\n| 3/01/24       | shop3 | 10.00      | Gift     | Donation    | 1     | Donated at grocery store |\n| 3/01/24       | shop3 | 5.92       | Grocery  | Grocery     | 1     | NA                       |\n\nTo prevent errors in the `category` and `subcategory` columns, I created a drop down list to choose from. This would minimize misspellings and prevent the creation of duplicate columns. The `split` column is a binary to indicate if a single transaction falls under two difference categories (as shown in the Gift-Grocery example). The `split` and `note` columns are useful when viewing the raw data, but were removed before the data visualization step.\n\n## Spending by Category\nMy first visualization depicts categorized spending over any desired interval of time. In order to achieve this, I needed a reactive data frame that accepted date range, and category inputs.\n\n::: panel-tabset\n#### Server.R\ntext\n\n#### ui.R\ntext 2\n:::\n\n\nMint had the option to toggle between a bar chart and a pie chart, but I focused on the bar chart since it's easier to compare groups visually. I started by creating the bar chart outside of the app, using `ggplot`. Instead of having a table of totals by category, I directly printed the totals on the bar chart.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  output$cat_bar_chart_output <- renderPlot({\n    \n    # code for bar chart ----\n    ggplot(spending_by_cat_df(), aes(x = reorder(x = category, X = total_spent), \n                                     y = total_spent, fill = category)) +\n      geom_col(aes(fill = category), show.legend = FALSE) +\n      scale_fill_manual(values = c(\"Shopping\" = \"#D6306D\",\n                                   \"Home\" = \"#72C8FF\",\n                                   \"Grocery\" = \"#7556ff\",\n                                   \"Education\" = \"#FEC009\",\n                                   \"Auto\" = \"#1BC599\", \n                                   \"Gifts\" = \"#FD8588\",\n                                   \"Travel\" = \"#B4A4FE\",\n                                   \"Amusement\" = \"#FD9C4F\",\n                                   \"Health\" = \"#6FF7B4\")) +\n      geom_text(aes(label = scales::dollar(round(total_spent, 0)), \n                    hjust = -0.2), size = 5) +\n      scale_y_continuous(labels = scales::label_dollar(scale = 1),\n                         limits = c(0, 1000)) +\n      theme_light() +\n      labs(fill = \"Category\", y = \"Total Spent\") +\n      theme(axis.text.y = element_text(size = 16),\n            axis.text.x = element_text(size = 12),\n            axis.title.x = element_text(size = 16),\n            axis.title.y = element_blank(),\n            panel.border = element_blank()) +\n      coord_flip()\n    \n  })\n```\n:::\n\n\n\n\n## Budget\nNote\n\n## Conclusion\nNote\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}