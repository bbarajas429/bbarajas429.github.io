{
  "hash": "4d41bb0e35c2a1d2340c024d8ba92871",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Visualizing My Personal Spending Data Using R-Shiny\"\ndescription: \"Using R-Shiny to re-create the Mint (by Intuit) interactive dashboard\"\nauthor: \n  - name: \"Briana Barajas\"\n    url: https://briana-barajas.github.io/\ndate: 06-20-2024\ncategories: [R, Visualization, Dashboard]\nimage: piggy-bank.jpeg\ndraft: FALSE\nfootnotes-hover: TRUE\noutput: html_document\nformat: \n  html:\n    code-fold: true\n    code-summary: \"View Code\"\n---\n\n\n## Background\n\nIn December 2023 it was announced that the Mint personal finance tool, hosted by [Intuit](https://www.intuit.com/), would no longer be supported. Mint users, such as myself, could download their historical spending data as a CSV file or switch over to [Credit Karma](https://www.creditkarma.com/). I initially transferred my data to Credit Karma, but I was not thrilled with the user interface. Unsurprisingly the site was focused more on tracking credit history, and I missed the simple interactive plots. In a bid to take control of my personal data, I decided to recreate the old dashboard (below).\n\n![](mint-spending-original.png){fig-align=\"center\" width=\"974\"}\n\n## Organizing the Data\n\nBefore I could start writing code for the dashboard, I needed to decide how to structure my data. Mint's tool grouped spending based on categories they provided. Since I had been using Mint for several years, I was familiar with my top spending categories and decided to keep most of the naming conventions. Using an Excel spreadsheet, I created a data table for my transaction history with the following structure:\n\n| purchase_date | store | total_cost | category | subcategory | split | note                     |\n|---------------|-------|------------|----------|-------------|-------|--------------------------|\n| 2/18/24       | shop1 | 12.34      | Home     | Supplies    | 0     | NA                       |\n| 2/28/24       | shop2 | 41.23      | Auto     | Gas         | 0     | NA                       |\n| 3/01/24       | shop1 | 10.00      | Gift     | Donation    | 1     | Donated at grocery store |\n| 3/01/24       | shop3 | 5.92       | Grocery  | Grocery     | 1     | NA                       |\n\nTo prevent errors in the `category` and `subcategory` columns, I created a pre-defined drop down list to choose from. This would minimize misspellings and keep capitalization consistent. I added an additional constraint on the date, so I could not create rows for dates that had not yet passed. The `split` column is a binary to indicate if a single transaction falls under two difference categories (as shown in the Gift-Grocery example). The `split` and `note` columns are useful when viewing the raw data, but were removed before the data visualization step.\n\n## Spending by Category\n\nMy first goal was to recreate the summary of spending by category, as shown in the image above. Mint had the option to toggle between a pie and bar chart, but I decided to focus on the bar chart since it's easier to visually compare groups. To achieve this, I needed to create a reactive data table that would be filtered by the selected date range and spending categories. This table contains the sums of each spending category, and was used to create the reactive bar chart.\n\n::: panel-tabset\n#### Data Table\n\nReactive data table for spending by category\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspending_by_cat_df <- reactive({\n  \n  # starting with the Excel sheet with spending data\n  spending %>% \n    \n    # filter using start and end date inputs\n    filter(date >= input$cat_bar_chart_input[1] & \n             date <= input$cat_bar_chart_input[2]) %>%\n    \n    # filter using selected spending categories\n    filter(category %in% c(input$cat_df_input)) %>% \n    \n    # calculate total spent for each category between given dates\n    group_by(category) %>% \n    summarise(total_spent = sum(total_cost)) %>% \n    arrange(desc(total_spent))\n  \n})\n```\n:::\n\n\n#### Bar Chart\n\nBar chart for spending by category\n\n\n::: {.cell}\n\n```{.r .cell-code}\noutput$cat_bar_chart_output <- renderPlot({\n  \n  # use reactive data frame for plot\n  ggplot(spending_by_cat_df(), \n         \n         # plot total spent vs. category\n         aes(x = reorder(x = category, X = total_spent), \n             y = total_spent, fill = category)) +\n    geom_col(aes(fill = category), show.legend = FALSE) +\n    \n    # consistent colors regardless of selected categories\n    scale_fill_manual(values = c(\"Shopping\" = \"#D6306D\",\n                                 \"Home\" = \"#72C8FF\",\n                                 \"Grocery\" = \"#7556FF\",\n                                 \"Education\" = \"#FEC009\",\n                                 \"Auto\" = \"#1BC599\", \n                                 \"Gifts\" = \"#FD8588\",\n                                 \"Travel\" = \"#B4A4FE\",\n                                 \"Amusement\" = \"#FD9C4F\",\n                                 \"Health\" = \"#6FF7B4\")) +\n    \n    # add labels for total spent\n    geom_text(aes(label = scales::dollar(round(total_spent, 0)), \n                  hjust = -0.2), size = 5) +\n    scale_y_continuous(labels = scales::label_dollar(scale = 1),\n                       limits = c(0, 1000)) +\n    \n    # plot aesthetics\n    theme_light() +\n    labs(fill = \"Category\", y = \"Total Spent\") +\n    theme(axis.text.y = element_text(size = 16),\n          axis.text.x = element_text(size = 12),\n          axis.title.x = element_text(size = 16),\n          axis.title.y = element_blank(),\n          panel.border = element_blank(),\n          panel.grid.major.y = element_blank()) +\n    coord_flip()\n  \n})\n```\n:::\n\n:::\n\n#### Final Product\n\n\n{{< video shiny-app-example.mp4 >}}\n\n\n\nThe chart is ordered by highest spending, and has labels with rounded totals to summarize top spending categories during the selected time. The data table below provides additional data, including specific stores and subcategories that contribute to the total spent. This is a simple interactive table of the transaction data described in the \"Organizing the Data\" section.\n\n## Budget Tab\n\nMint also provided several tools to indicate whether your spending was within an established budget. Similar to the spending by category, this required a reactive data table that was connected to the visualization. I don't budget for every spending subcategory, so there were a few more manual steps in creating the associated table. I then created the bar chart using `ggplot2`, using the percent of budget spent to create a progress bar.\n\n::: panel-tabset\n#### Data Table\n\nReactive data table for subcategory budgets\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbudget_df <- reactive({\n  \n  # starting with the Excel sheet with spending data\n  spending %>% \n    \n    # filter to list of subcategories that do have a set budget\n    filter(subcategory %in% budget_subcategories) %>% \n    \n    # monthly budget based on selection\n    filter(month == input$budget_month_input) %>% \n    \n    # calculate total spent within subcategory\n    mutate(subcategory = as.factor(subcategory)) %>% \n    group_by(subcategory) %>% \n    summarise(total_spent = sum(total_cost)) %>% \n    \n    # define numeric budget for each subcategory\n    mutate(budget = case_when(subcategory == \"Allowance\" ~ 100,\n                              subcategory == \"Grocery\" ~ 320,\n                              subcategory == \"Gas\" ~ 300,\n                              subcategory == \"Coffee\" ~ 25,\n                              subcategory == \"Subscriptions\" ~ 7,\n                              subcategory == \"Insurance\" ~ 183,\n                              subcategory == \"Rent\" ~ 928)) %>% \n    \n    # create categorical column to indicate proximity to budget\n    mutate(over = case_when(budget < total_spent ~ \"Over Budget\",\n                            budget == total_spent ~ \"At Limit\",\n                            budget > total_spent ~ \"On Track\")) %>% \n    \n    # calculate percent of budget spent & remaining monthly balance\n    mutate(percent = round(total_spent/budget * 100),\n           remaining = budget - total_spent)\n})\n```\n:::\n\n\n#### Bar Chart\n\nProgress bar chart for percent of budget spent\n\n\n::: {.cell}\n\n```{.r .cell-code}\noutput$budget_plot_output <- renderPlot({\n  \n  # use reactive data frame for plot\n  ggplot(budget_df(), \n         \n         # plot percent spent for each subcategory\n         aes(x = subcategory, \n             y = percent, \n             fill = over)) +\n    \n    # plain gray bar for background to progress bar\n    geom_col(aes(y = 100), fill = \"grey90\", col = \"black\", width = 0.6) +\n    \n    # progress bars for each subcategory \n    geom_col(width = 0.585, alpha = 0.85) +\n    \n    # color based on spending status \n    scale_fill_manual(values = c(\"At Limit\" = \"#F1AF32\",\n                                 \"On Track\" = \"#438D29\",\n                                 \"Over Budget\" = \"#DA4D49\")) +\n    \n    # plot aesthetics\n    theme_minimal() +\n    labs(fill = \"Status\", y = \"Percent of Monthly Budget\") +\n    scale_y_continuous(labels = scales::percent_format(scale = 1)) +\n    coord_flip(ylim = c(0, 100)) +\n    theme(panel.grid.major.y = element_blank(),\n          axis.text.y = element_text(size = 16), \n          axis.text.x = element_text(size = 12),\n          axis.title.y = element_blank(),\n          axis.title.x = element_text(size = 16),\n          legend.title = element_text(size = 14),\n          legend.text = element_text(size = 12))\n  \n})\n```\n:::\n\n:::\n\n#### Final Product\n\n![](budget-example.png){fig-align=\"center\"}\n\nThis page utilizes clicks as inputs to return a budget summary for the desired month. Once a subcategory on the chart is clicked, the row below the visualization automatically populates specific values regarding this specific budget. This makes it easy to see the remaining balance for the month.\n\n## Conclusion\n\nCompleting this dashboard has given me the opportunity to explore R-Shiny and create a product that's solely tailored to my needs. I find myself reaching for this tool often and highly recommend everyone take some time to tackle those personal projects you might have on the back burner. The GitHub repository and full code for this project are not publicly available, as it contains some personal information. However, I hope the code provided is enough to inspire anyone to play with R-Shiny.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}