{
  "hash": "7ea6d400d763da4b6fd4ec39317182ad",
  "result": {
    "markdown": "---\ntitle: \"Creating an infographic using Oregon spotted frog capture data\"\ndescription: \"Creating custom data visualizations in R using mark-recapture data from USGS\"\nauthor: \n  - name: \"Briana Barajas\"\n    url: https://briana-barajas.github.io/\n    affiliation: MEDS\n    affiliation-url: https://bren.ucsb.edu/masters-programs/master-environmental-data-science\ndate: 03-12-2024\ncategories: [MEDS, R, Visualization]\ncitation:\n  url: https://github.com/briana-barajas/barajas-eds240-hw4\nimage: rana-pretiosa.jpeg\ndraft: false\nfootnotes-hover: true\noutput: html_document\nformat: \n  html:\n    code-fold: true\n    code-summary: \"View Code\"    \n---\n\n\n\n\n\n\n## Overarching Question\n\nThe capture-mark-recapture technique (herein CMR) is a common surveying technique used to calculate estimations of populations or survival over time. As with many mathematical analyses, there are some assumptions that much be met to calculate survival using CMR data. The data used for my infographic was used in a publication that commented on the species survival over several years ([Rowe et. al](https://wildlife.onlinelibrary.wiley.com/doi/10.1002/jwmg.22496)). To calculate survival, it is assumed that the likelihood of catching any individual is the same for all individuals in the population. With this in mind, I created several visualizations that answer the question, **what factors affect how easy it is to capture a frog?**\n\n## About the Data\n\nFor the final visualizations, I used two different data frames within the same [data publication](https://www.usgs.gov/data/oregon-spotted-frog-rana-pretiosa-captures-and-after-drought-mitigation-jack-creek-oregon-2009) by the United States Geological Survey (USGS). The first data frame contained the data on CMR surveys of the Oregon Spotted frog (*Rana pretiosa*) from 2009-2021. The raw data was in \"long\" format, where every year and visit number were an individual column of 0s and 1s, indicating whether or not an individual was captured. Using `pivot_longer` , I split year and visit number into individual columns. This allowed me to easily sum the data so that I could count the number of frogs detected based on particular groups (reach, sex, and size).\n\nThe second data frame contained data on environmental variables around the time the surveys were conducted. I only focused on the NDVI column in this data set, as I hypothesized that vegetation density might impact the ease of catching frogs. The U.S. Fish & Wildlife service also hosts a geographic data set with the species range of several threatened, and endangered species. I used the [species range data](https://ecos.fws.gov/ecp/species/6633) to create a custom range map for the infographic.\n\n### Read in data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## ========================================\n##             Read in Data            ----\n## ========================================\n# set data directory\ndata_dir <- \"/Users/bri_b/Documents/Work/bb-website/bbarajas429.github.io/blog-posts/2024-03-12-frog-infrographic/data\"\n\n# read frog data ----\nfrogs_raw <- read_csv(here(data_dir, \"frog_cmr\", \"cmrData.csv\")) %>% \n  clean_names()\n\n# read water data ----\nenv_raw <- read_csv(here(data_dir, \"frog_cmr\", \"waterCov.csv\"))\n\n# species range data ----\nquery <- \"SELECT * FROM usfws_complete_species_current_range_2 WHERE SCINAME='Rana pretiosa' \"\n\nrange_map <- st_read(here(data_dir, \"usfws_complete_species_current_range\",\n                          \"usfws_complete_species_current_range_2.shp\"),\n                     query = query) %>%\n  st_make_valid() %>%\n  clean_names()\n\n# full state maps ----\nstate_map <- st_read(here(data_dir, \"cb_2018_us_state_500k\", \"cb_2018_us_state_500k.shp\")) %>%\n  st_make_valid() %>%\n  clean_names() %>%\n  filter(name == \"Oregon\" | name == \"Washington\")\n\n# create a coordinate point for data collection area\ndata_location <- data.frame(lat = c(43.224875),\n                            lon = c(-121.587244)) %>%\n  st_as_sf(coords = c(\"lon\", \"lat\"), crs = st_crs(state_map))\n\n## ========================================\n##             Read in Images          ----\n## ========================================\n# frog icons ----\nfrog_female <- here(data_dir, \"frog-female.png\")\nfrog_male <- here(data_dir, \"frog-male.png\")\n\n# jack creek map ----\ncreek_img <- png::readPNG(here(data_dir, \"jack-creek-inset.png\"), native = TRUE)\n\n# sul image ----\nsul_img <- png::readPNG(here(data_dir, \"sul-measurement.png\"), native = TRUE)\n\n# lilypad image ----\nyellow_pad <- here(data_dir, \"yellow-pad.png\")\ngreen_pad <- here(data_dir, \"green-pad.png\")\n\n# lilypad legend ----\nlilypad_legend <- png::readPNG(here(data_dir, \"lilypad-legend.png\"))\n```\n:::\n\n\n### Data Wrangling\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## ========================================\n##        Wrangle environmental data   ----\n## ========================================\nenv <- env_raw %>% \n  \n  # select sites of interest (most surveyed)\n  filter(reach == \"Middle Jack\" | reach == \"Upper Jamison\")\n\n## ========================================\n##          Wrangle frog CMR data      ----\n## ========================================\nfrogs <- frogs_raw %>% \n  \n  # filter to most surveyed reaches\n  filter(reach == \"Middle Jack\" | reach == \"Upper Jamison\") %>% \n  \n  # pivot to split year from detected column\n  pivot_longer(cols = 5:43,\n               names_to = \"year_visit\",\n               values_to = \"frog_detected\") %>% \n  \n  # split year and visit number into two columns %>% \n  separate(year_visit, \n           c(\"year\", \"visit\"),\n           '_') %>% \n  \n  # remove x that precedes the year (x2010, x2011)\n  mutate(year = str_remove(year, 'x')) %>% \n  \n  # rename size to include units\n  rename(sul_mm = sul) %>% \n  \n  # remove years w/no frog surveys at Upper Jamison\n  filter(year %in% c(2009:2019))\n\n\n# clean environment\nrm(env_raw, frogs_raw, query)\n```\n:::\n\n\n## Creating Data Visualizations\n\n### Species Range Map\n\nThe species range map was not one of the key visualizations, and required minimal data wrangling. The USFWS dataset included ranges for all threatened or endangered species, so I used a query to select only the Oregon Spotted Frog range. To better demonstrate the study area, I added an inset map with labeled locations of interest. This map is an image from the original publication and has the site names clearly labeled which would be important for the \"vegetation\" figure.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create species range map\nggplot() +\n  \n  # map states & species range\n  geom_sf(data = state_map, col = \"slategray\") +\n  geom_sf(data = range_map, fill = \"yellowgreen\", col = \"black\") +\n  \n  # add box around study area \n  geom_sf(data = data_location, shape = 15, size = 6, col = \"dodgerblue\",\n          alpha = 0.45) +\n  \n  # add text annotation for study area\n  annotate(geom = \"text\", x = -118, y = 45.4, label = \"Study Area \\n Jack Creek, Oregon\", family = \"noto\", size = 4, col = \"black\") +\n  \n  # expand axis limits so inset image does not get cropped\n  coord_sf(xlim = c(-125, -116), ylim = c(41.5, 49.5), expand = FALSE) +\n  \n  # add lines connecting study area to inset map\n  geom_curve(aes(x = -120, xend = -121.50,\n                 y = 44.98, yend = 43.224875),\n             curvature = 0, col = \"black\", linewidth = 0.7) +\n  \n  geom_curve(aes(x = -120, xend = -121.50,\n                 y = 43.02, yend = 43.224875),\n             curvature = 0, col = \"black\", linewidth = 0.7) +\n  \n  # add map of study area\n  annotation_raster(creek_img, xmax = -120, xmin = -116,\n                    ymax = 45, ymin = 43) +\n  \n  # update general theme to remove background\n  theme_void() +\n  \n  # add title\n  labs(title = \"Species Range Map\") +\n  \n  # adjust title theme and size\n  theme(plot.title = element_text(hjust = 0.5, vjust = 0, \n                                  family = \"roboto\", size = 30))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n### Males vs. Females\n\nSince I was comparing counts, I decided I would create a unique version of a bar chart. I was originally looking at lollipop charts when I got the idea to connect the point to a curved line, so it appeared as though the frog was jumping. Since the data presented in this plot was so simple, I wanted to remove as many of the plot elements as possible. For example, instead of a legend I directly wrote out the frog counts by each point. I also made the male and female frog different colors, which I kept consistent in the final inforgraphic caption. Additionally, after calculating the sum I changed the sex column to be the same character string so both frogs would both be on the same axis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## ............. Data Preparation..................\n# create data subset of male vs. female frogs captured\nmf_count <- frogs %>% \n  group_by(sex) %>% \n  summarise(frog_catch = sum(frog_detected))\n\n# add column with male/female frog images\nmf_count$image <- c(frog_female, frog_male)\n\n# change sex to same value so frogs can be on the same line\nmf_count$sex <- \"A\"\n\n## ..................Plot..........................\n\n# create plot of male vs. female frogs caught\nggplot(data = mf_count) +\n  \n  # add images of frogs for male and female\n  geom_image(aes(x = frog_catch, y = sex, image = image), \n             size = 0.2) +\n  \n  # add hop line for males\n  geom_curve(aes(x = 0, xend = 267, y = 1, yend = 1), linetype = 2,\n             curvature = -0.4, col = \"#18BA9A\", linewidth = 1) +\n  \n  # add hop line for females\n  geom_curve(aes(x = 0, xend = 350, y = 1, yend = 1), linetype = 2,\n             curvature = -0.4, col = \"#754edb\", linewidth = 1) +\n  \n  # expand x-axis to add space for text\n  coord_cartesian(xlim = c(0, 360)) +\n  \n  # pre-set theme\n  theme_minimal() +\n  \n  # customize labels and title\n  labs(title = \"Sex of Captured Frogs\") +\n  \n  # add labels for data points\n  annotate(geom = \"text\", x = 342.5, y = 0.87, label = \"350 female frogs\", \n           family = \"noto\", size = 4, col = \"#754edb\") +\n  annotate(geom = \"text\", x = 259, y = 0.87, label = \"267 male frogs\",\n           family = \"noto\", size = 4, col = \"#18BA9A\") +\n  \n  # remove gridlines\n  theme(panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        \n        # remove labels that aren't needed\n        axis.text.x = element_blank(),\n        axis.title.y = element_blank(),\n        \n        # customize fonts\n        plot.title = element_text(family = \"roboto\", size = 30,\n                                  hjust = 0.5, vjust = -9.5),\n        axis.text.y = element_blank(),\n        axis.title.x = element_blank())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n### Size Distribution\n\nSince frog size is a continuous variable, I wanted to focus on which sizes were most common instead of calculating totals. Ideally, the distribution of frogs caught would be normally distributed, so I used arrows and notes to highlight where this was not the case. I chose the green color to continue the frog theme, and kept all my annotations black so they popped against the white background. I decided to keep the gridlines so the two peaks could be easily compared. Different species have different standards for being measured, so I wanted to include an image that shows how the frogs were measured. Frogs are measured from snout to urostyle. Instead of defining urostyle, I summarized this measurement as \"length\" for simplicity.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## ............. Data Preparation..................\n# subset to only include frogs that were captured\nfrogs_subset <- frogs %>% \n  filter(frog_detected == 1)\n\n## ..................Plot..........................\n# plot density of frog size\nggplot(frogs_subset, aes(x = sul_mm)) +\n  geom_density(fill = \"#4EA72E\", col =\"seagreen\", alpha = 0.8) +\n  \n  # change standard theme\n  theme_minimal() +\n  \n  # update axis titles\n  labs(y = \"Density\", \n       x = \"Length (mm)\",\n       title = \"Distribution of Frog Length\") +\n  \n  # update text font and size\n  theme(axis.title = element_text(family = \"noto\", size = 16),\n        axis.text = element_text(family = \"noto\", size = 14),\n        plot.title = element_text(family = \"roboto\",\n                                  hjust = 0.5, size = 30, vjust = 1),\n        \n        # increase plot margin\n        plot.margin = margin(1,0,0,0, \"cm\")) +\n  \n  # update plot to start at y-axis\n  scale_y_continuous(expand=c(0, 0)) +\n  \n  # add arrow pointing to most common sizes\n  geom_curve(aes(x = 47.6, xend = 53,\n                 y = 0.047, yend = 0.045),\n             curvature = 0.2, arrow = grid::arrow()) +\n  \n  # add note on common frog sizes\n  annotate(geom = \"text\", family = \"noto\", size = 3,\n           label = \"Most captured frogs\\n were between 53 - 55 mm \\n in length\",\n           x = 46, y = 0.051) +\n  \n  # add image for measuring frog lengths\n  annotation_raster(sul_img, xmax = 82, xmin = 72,\n                    ymax = 0.052, ymin = 0.033)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n### Vegetation\n\nFor vegetation, I wanted to highlight several parts of the data including year, average summer normalized difference vegetation index (NDVI), and frog count. To avoid overly complex figures, I decided to focus only on NDVI over time and compare frog counts directly within the graphic. I originally created a line graph that demonstrated NDVI over time for both sites. I decided against this, because I was more interested in displaying the difference not changes. Instead of the line graph, I opted for a dumbell plot to better demonstrate theses differences. I wanted the data points to look like lilypads in a pond. Since Middle Jack has more dense vegetation (higher NDVI), I made the leaf more green than the one for Upper Jamison. I also know that NDVI is not an intuitive variable, so I added a line at 0 and text highlighting that values above zero indicate more dense vegetation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## ............. Data Preparation..................\n# prepare NDVI data for dumbell plot\nenv_db_data <- env %>% \n  filter(year <= 2019) %>% \n  select(c(\"year\", \"mdNDVI\", \"reach\")) %>% \n  pivot_wider(names_from = reach, values_from = mdNDVI) %>% \n  clean_names() %>% \n  mutate(year = as.factor(year),\n         leaf = green_pad,\n         dry_leaf = yellow_pad)\n\n## ..................Plot..........................\n# create dumbell plot of annual NDVI\nggplot(env_db_data) +\n  \n  # add line for 0 axis\n  geom_hline(yintercept = 0, linetype = 3) +\n  \n  # add lines to connect NDVI of different sites\n  geom_segment(aes(y = middle_jack, yend = upper_jamison,\n                   x = year, xend = year), \n               \n               linewidth = 0.7, col = \"slategray\") +\n  \n  # add points as images\n  geom_image(aes(x = year, y = middle_jack,\n                 image = leaf), size = 0.08) +\n  geom_image(aes(x = year, y = upper_jamison,\n                 image = dry_leaf), size = 0.08) +\n  \n  # change to standard theme\n  theme_minimal() +\n  \n  # update axis names and titles\n  labs(y = \"NDVI\",\n       x = \"Year\",\n       title = \"Average Summer NDVI\") +\n  \n  # update theme\n  # update background and grid color\n  theme(panel.background = element_rect(fill = \"aliceblue\",\n                                        color = \"lightblue3\",\n                                        linewidth = 1),\n        panel.grid.major = element_line(color = \"azure2\"),\n        panel.grid.minor = element_line(color = \"azure2\"),\n        \n        # update fonts and text size\n        plot.title = element_text(family = \"roboto\", size = 30, \n                                  hjust = 0.5),\n        axis.title = element_text(family = \"noto\", size = 16),\n        axis.text = element_text(family = \"noto\", size = 14)) +\n  \n  # add annotation to provide information for NDVI\n  annotate(geom = \"text\", size = 4, family = \"noto\",\n           label = \"Dense vegetation \\n Sparse vegetation\",\n           x = 7, y = 0, col = \"blue\") +\n  \n  # add legend \n  annotation_raster(lilypad_legend, xmin = 8.7, xmax = 11,\n                    ymin = 2, ymax = 1.1) +\n  \n  # increase x-axis length\n  coord_cartesian(xlim = c(0,11)) +\n  \n  # increase spacing between x-axis ticks\n  scale_x_discrete(expand = c(0, -11))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## Infographic\n\nAfter creating my plots in R, I switched over to Canva to create the final infographic. Unfortunately, I realized that I had not considered some of the requirements for exporting images using `ggsave`. Instead of updating the code, I decided to adjust some of the final titles and images in Canva. Since my overarching question is not clear using visuals alone, I started my infographic with a short background section.\n\n![](infographic.png)\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}